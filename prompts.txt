以下の文章を極力意味が伝わるように英訳してください.コピーしやすいようにコード形式で出力してください

文化祭のWebサイトを作成します
Viteを使用してReact・TypeScriptで開発します、
以下の要素を含むWebサイトを作成します
- タイトル(宇部高専祭 2025)
- ホーム(タイムライン的役割 注目イベントや展示などを表示)
- イベント(イベントのイメージ画像とその詳細を並べる タップするとそれぞれの詳細ページが表示される)
- 展示/露店(展示と露店のイメージ画像とその詳細を並べる タップするとそれぞれの詳細ページが表示される)
- タイムスケジュール(縦軸のタイムスケジュール 2日分 基本はテキストカードを並べる テキストカードをホバーすると縦幅が広がり、イベントに対応したイメージ画像が表示される それをクリックするとイベントの詳細ページに遷移する)
- マップ(2分割で左側に校内全体のマップ 右側にイベント・展示のテキストカード テキストカードをホバーすると縦幅が広がってイメージ画像を表示 クリックすると詳細ページに遷移する)
- 詳細ページ (イベント・展示・露店それぞれの詳細をまとめる、タイトルとイメージ画像、詳細、タグ、一番下にマップ)
- 検索機能(単語を検索するとそれを含んだ詳細ページのイメージ画像+テキストのカードが一覧で表示される)
- タグ機能(イベント・展示・露店それぞれにタグを付けて、タグをクリックするとそのタグが付いた詳細ページのイメージ画像+テキストのカードが一覧で表示される)
- ブックマーク機能(詳細カードを保存して一覧で見られる機能)
- カラーテーマ(ライトモード・ダークモード)
- UIの言語(日本語/英語)

サイト全体のUIはXやInstagramのようなSNSアプリ風に演出してください
レスポンシブなデザインとコードにします
PC版:フッターは含めず、ヘッダーは主要ページ(ホーム、イベント、展示/露店、タイムスケジュール、マップ)のみ、サイドバーに設定/ブックマーク/検索を配置してください
モバイル版:ヘッダーを使用せず、フッターに固定するバーでPC版のヘッダーと同じ内容を表示してください、右上にハンバーガーメニューを配置し、タップするとヘッダーの内容+PC版のサイドバーと同じ機能が表示されるようにしてください

デザインは縦画面型のデザインを想定しています、余白を使用して情報が縦にまとまるようにしてください 
ただし、全体のカラーリングはTBS RECRUITのサイトを参考にしてください

フェイクになる情報(架空のいいね数や架空のプロフィールフィードなど)は含めないでください
デバッグ用のダミーの画像を使用してください
イベントや展示/露店などの一覧に使用するカードはサイト全体で同じものを作り使用してください
カードのUIはイメージ画像とタイトルをメインに、ホバーすると時間と場所/ブックマークボタンが表示、イメージ画像をクリックすると詳細ページに遷移するようにしてください

コード内のコメントは極力書かず、書く場合はすべて英語で記載してください

出力が長くなるため
以下の指示をPart 1～Part 5に分割し、各Partごとに出力を行ってください。各Partを出力し終えたら、次のPartの出力をユーザーからリクエストされるまで待機してください。コードの出力は改変を繰り返す形で生成し、毎パートで動作を確認できるようにしてください
Part 1: フォルダ構造と必要なファイルのリストを出力してください スケルトンを作成してください
Part 2: claudeの出力が文字数制限で途切れてしまった時の為に、ファイルの添付などがない初期状態から再度出力を行うためのプロンプトをパートごとに出力してください
Part 3: 全体の構造に影響する部分のファイルを出力してください(カラーテーマの部分)
Part 4: 全体の構造に影響する部分のファイルを出力してください(UIの言語の部分)
Part 5: 全体の構造に影響する部分のファイルを出力してください(検索機能の部分)
Part 6: 全体の構造に影響する部分のファイルを出力してください(ブックマーク機能の部分)
Part 7: 全体の構造に影響する部分のファイルを出力してください(一覧表示に使用するカードの部分 )
Part 8: 全体の構造に影響する部分のファイルを出力してください(タグ機能の部分)
Part 9: レイアウトUIに関する部分のファイルを出力してください(PC版ヘッダーの部分)
Part 10: レイアウトUIに関する部分のファイルを出力してください(PC版サイドバーの部分)
Part 11: レイアウトUIに関する部分のファイルを出力してください(モバイル版のフッター固定バーの部分)
Part 12: レイアウトUIに関する部分のファイルを出力してください(モバイル版ハンバーガーメニューの部分)
Part 13: 一覧に使用するカードに関する部分のファイルを出力してください
Part 14: ページに関する部分のファイルを出力してください(ホーム)
Part 15: ページに関する部分のファイルを出力してください(イベント)
Part 16: ページに関する部分のファイルを出力してください(展示/露店)
Part 17: ページに関する部分のファイルを出力してください(タイムスケジュール)
Part 18: ページに関する部分のファイルを出力してください(マップ)
Part 19: ページに関する部分のファイルを出力してください(詳細ページ)
Part 20: ページに関する部分のファイルを出力してください(エラーページ)
Part 21: ページに関する部分のファイルを出力してください(404ページ)
Part 22: ページ全体の設定に関するファイルを出力してください(カラーテーマ・UIの言語)
Part 23: 検索機能に関するUIと機能のファイルを出力してください
Part 24: ブックマーク機能に関するUIと機能のファイルを出力してください
Part 25: コード全体を見直してリファクタリングしてください

Create a website for a cultural festival.
Develop it using Vite with React and TypeScript.
Include the following elements in the website:
- Title (Ube Kosen Festival 2025)
- Home (serves as a timeline, displaying highlighted events or exhibits)
- Events (list event images and details; tapping an event shows its detail page)
- Exhibits/Stalls (list exhibit and stall images and details; tapping shows their detail page)
- Time Schedule (vertical timeline for 2 days; basic text cards listed; hovering over a card expands its height to show an event-related image; clicking navigates to the event’s detail page)
- Map (split into 2 sections: left side shows the school map, right side lists event/exhibit text cards; hovering over a card expands it to show an image; clicking navigates to the detail page)
- Detail Page (summarizes details for events, exhibits, and stalls, including title, image, details, tags, and a map at the bottom)
- Search Function (searching a keyword displays a list of detail page cards with images + text containing that keyword)
- Tag Function (attach tags to events, exhibits, and stalls; clicking a tag displays a list of detail page cards with images + text for that tag)
- Bookmark Function (save detail cards and view them in a list)
- Color Theme (light mode and dark mode)
- UI Language (Japanese/English)

Style the entire site’s UI like a social media app such as X or Instagram.
Make it a responsive design and code.
For PC: exclude the footer; include only main pages (Home, Events, Exhibits/Stalls, Time Schedule, Map) in the header; place settings/bookmarks/search in the sidebar.
For Mobile: exclude the header; use a fixed footer bar displaying the same content as the PC header; place a hamburger menu in the top-right corner, which, when tapped, shows the header content + the same features as the PC sidebar.

Assume a vertical layout design, using padding to organize information vertically.
However, base the overall color scheme on the TBS RECRUIT website.

Do not include fake information (e.g., fictional likes or profile feeds).
Use dummy images for debugging purposes.
Use the same card design across the site for listing events, exhibits, and stalls.
For the card UI, prioritize the image and title; on hover, display time, location, and a bookmark button; clicking the image navigates to the detail page.

Minimize comments in the code; if included, write them in English.

Since the output will be lengthy, split the instructions into Part 1 to Part 5 as follows and output each part separately. After completing each part, wait for the user to request the next part before proceeding. Generate the code iteratively, ensuring functionality is verifiable at each part.
- Part 1: Output the folder structure and list of required files; create a skeleton.
- Part 2: To handle cases where Claude’s output is cut off due to character limits, output prompts for each part to regenerate from the initial state without file attachments.
- Part 3: Output files affecting the overall structure (color theme section).
- Part 4: Output files affecting the overall structure (UI language section).
- Part 5: Output files affecting the overall structure (search function section).
- Part 6: Output files affecting the overall structure (bookmark function section).
- Part 7: Output files affecting the overall structure (card listing section).
- Part 8: Output files affecting the overall structure (tag function section).
- Part 9: Output files related to layout UI (PC header section).
- Part 10: Output files related to layout UI (PC sidebar section).
- Part 11: Output files related to layout UI (mobile fixed footer bar section).
- Part 12: Output files related to layout UI (mobile hamburger menu section).
- Part 13: Output files related to the card used in listings.
- Part 14: Output files related to pages (Home).
- Part 15: Output files related to pages (Events).
- Part 16: Output files related to pages (Exhibits/Stalls).
- Part 17: Output files related to pages (Time Schedule).
- Part 18: Output files related to pages (Map).
- Part 19: Output files related to pages (Detail Page).
- Part 20: Output files related to pages (Error Page).
- Part 21: Output files related to pages (404 Page).
- Part 22: Output files related to overall page settings (color theme and UI language).
- Part 23: Output files for the search function UI and functionality.
- Part 24: Output files for the bookmark function UI and functionality.
- Part 25: Review and refactor the entire code.