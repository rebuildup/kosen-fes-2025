以下の文章を極力意味が伝わるように英訳してください.コピーしやすいようにコード形式で出力してください

文化祭のWebサイトを作成します
Viteを使用してReact・TypeScriptで開発します、
以下の要素を含むWebサイトを作成します
- タイトル(宇部高専祭 2025)
- ホーム(タイムライン的役割 注目イベントや展示などを表示)
- イベント(イベントのイメージ画像とその詳細を並べる タップするとそれぞれの詳細ページが表示される)
- 展示/露店(展示と露店のイメージ画像とその詳細を並べる タップするとそれぞれの詳細ページが表示される)
- タイムスケジュール(縦軸のタイムスケジュール 2日分 基本はテキストカードを並べる テキストカードをホバーすると縦幅が広がり、イベントに対応したイメージ画像が表示される それをクリックするとイベントの詳細ページに遷移する)
- マップ(2分割で左側に校内全体のマップ 右側にイベント・展示のテキストカード テキストカードをホバーすると縦幅が広がってイメージ画像を表示 クリックすると詳細ページに遷移する)
- 詳細ページ (イベント・展示・露店それぞれの詳細をまとめる、タイトルとイメージ画像、詳細、タグ、一番下にマップ)
- 検索機能(単語を検索するとそれを含んだ詳細ページのイメージ画像+テキストのカードが一覧で表示される)
- タグ機能(イベント・展示・露店それぞれにタグを付けて、タグをクリックするとそのタグが付いた詳細ページのイメージ画像+テキストのカードが一覧で表示される)
- ブックマーク機能(詳細カードを保存して一覧で見られる機能)
- カラーテーマ(ライトモード・ダークモード)
- UIの言語(日本語/英語)

サイト全体のUIはXやInstagramのようなSNSアプリ風に演出してください
レスポンシブなデザインとコードにします
PC版:フッターは含めず、ヘッダーは主要ページ(ホーム、イベント、展示/露店、タイムスケジュール、マップ)のみ、サイドバーに設定/ブックマーク/検索を配置してください
モバイル版:ヘッダーを使用せず、フッターに固定するバーでPC版のヘッダーと同じ内容を表示してください、右上にハンバーガーメニューを配置し、タップするとヘッダーの内容+PC版のサイドバーと同じ機能が表示されるようにしてください

デザインは縦画面型のデザインを想定しています、余白を使用して情報が縦にまとまるようにしてください 
ただし、全体のカラーリングはTBS RECRUITのサイトを参考にしてください

フェイクになる情報(架空のいいね数や架空のプロフィールフィードなど)は含めないでください
デバッグ用のダミーの画像を使用してください
イベントや展示/露店などの一覧に使用するカードはサイト全体で同じものを作り使用してください
カードのUIはイメージ画像とタイトルをメインに、ホバーすると時間と場所/ブックマークボタンが表示、イメージ画像をクリックすると詳細ページに遷移するようにしてください

コード内のコメントはすべて英語で記載してください

出力が長くなるため
以下の指示をPart 1～Part 5に分割し、各Partごとに出力を行ってください。各Partを出力し終えたら、次のPartの出力をユーザーからリクエストされるまで待機してください。
Part 1: フォルダ構造と必要なファイルのリストを出力してください
Part 2: claudeの出力が文字数制限で途切れてしまった時の為に、ファイルの添付などがない初期状態から再度出力を行うためのプロンプトをパートごとに出力してください
Part 3: 全体の構造に影響する部分のファイルを出力してください(カラーテーマの部分)
Part 4: 全体の構造に影響する部分のファイルを出力してください(UIの言語の部分)
Part 5: 全体の構造に影響する部分のファイルを出力してください(検索機能の部分)
Part 6: 全体の構造に影響する部分のファイルを出力してください(ブックマーク機能の部分)
Part 7: 全体の構造に影響する部分のファイルを出力してください(一覧表示に使用するカードの部分 )
Part 8: 全体の構造に影響する部分のファイルを出力してください(タグ機能の部分)
Part 9: レイアウトUIに関する部分のファイルを出力してください(PC版ヘッダーの部分)
Part 10: レイアウトUIに関する部分のファイルを出力してください(PC版サイドバーの部分)
Part 11: レイアウトUIに関する部分のファイルを出力してください(モバイル版のフッター固定バーの部分)
Part 12: レイアウトUIに関する部分のファイルを出力してください(モバイル版ハンバーガーメニューの部分)
Part 13: 一覧に使用するカードに関する部分のファイルを出力してください
Part 14: ページに関する部分のファイルを出力してください(ホーム)
Part 15: ページに関する部分のファイルを出力してください(イベント)
Part 16: ページに関する部分のファイルを出力してください(展示/露店)
Part 17: ページに関する部分のファイルを出力してください(タイムスケジュール)
Part 18: ページに関する部分のファイルを出力してください(マップ)
Part 19: ページに関する部分のファイルを出力してください(詳細ページ)
Part 20: ページに関する部分のファイルを出力してください(エラーページ)
Part 21: ページに関する部分のファイルを出力してください(404ページ)
Part 22: ページ全体の設定に関するファイルを出力してください(カラーテーマ・UIの言語)
Part 23: 検索機能に関するUIと機能のファイルを出力してください
Part 24: ブックマーク機能に関するUIと機能のファイルを出力してください
Part 25: コード全体を見直してリファクタリングしてください

We will create a website for the school festival.  
We will develop it using React and TypeScript with Vite.  
We will build a website that includes the following elements:  
- Title (“Ube Technical College Festival 2025”)  
- Home (serves as a timeline, displaying featured events and exhibitions)  
- Events (display event images alongside their details; tapping on each opens its own detail page)  
- Exhibitions/Food Stalls (display exhibition and stall images alongside their details; tapping on each opens its own detail page)  
- Timetable (a vertical timeline for two days, composed of text cards; hovering over a card expands its height to show the related event image; clicking it navigates to the event’s detail page)  
- Map (split into two panels: left shows the entire campus map; right shows text cards for events and exhibitions; hovering over a card expands it to reveal an image; clicking navigates to its detail page)  
- Detail Page (aggregates details for events, exhibitions, and stalls, including title, image, description, tags, and a map at the bottom)  
- Search Function (searching a keyword shows a list of cards—each with an image and text—for detail pages that include that word)  
- Tag Function (each event, exhibition, and stall has tags; clicking a tag lists cards—with images and text—for detail pages with that tag)  
- Bookmark Function (save detail cards and view them in a dedicated list)  
- Color Theme (Light Mode / Dark Mode)  
- UI Languages (Japanese / English)  

Design the overall UI to feel like a social media app such as X or Instagram.  
Ensure both the design and the code are responsive.  

PC Version:  
- No footer  
- Header contains only the main pages (Home, Events, Exhibitions/Food Stalls, Timetable, Map)  
- Place Settings, Bookmarks, and Search in a sidebar  

Mobile Version:  
- No header  
- Use a fixed footer bar to display the same items as the PC header  
- Place a hamburger menu in the top-right; tapping it reveals the header items plus the PC sidebar functions  

Assume a vertical-layout design, using whitespace to stack information vertically.  
Refer to the color scheme of the TBS RECRUIT site.  

Do not include any fake information (e.g., fictitious like counts or profile feeds).  
Use placeholder images for debugging.  
Use a single, consistent card component throughout the site for listing events, exhibitions, and stalls.  
Card UI should feature the image and title; on hover, show time, location, and a bookmark button; clicking the image navigates to the detail page.  

Write all comments in the code in English.  

Because the output will be long, split the instructions into Part 1 through Part 25. After completing each Part, wait for the user to request the next Part before proceeding:  
Part 1: Output the folder structure and list of required files  
Part 2: Provide, for each Part, a prompt to restart from scratch (without file attachments) in case Claude’s output is cut off by character limits  
Part 3: Output files that affect the overall structure (color theme portion)  
Part 4: Output files that affect the overall structure (UI language portion)  
Part 5: Output files that affect the overall structure (search feature portion)  
Part 6: Output files that affect the overall structure (bookmark feature portion)  
Part 7: Output files that affect the overall structure (card component for listings)  
Part 8: Output files that affect the overall structure (tag feature portion)  
Part 9: Output layout/UI files for the PC header  
Part 10: Output layout/UI files for the PC sidebar  
Part 11: Output layout/UI files for the mobile fixed footer bar  
Part 12: Output layout/UI files for the mobile hamburger menu  
Part 13: Output files related to the card component used in listings  
Part 14: Output page files (Home)  
Part 15: Output page files (Events)  
Part 16: Output page files (Exhibitions/Food Stalls)  
Part 17: Output page files (Timetable)  
Part 18: Output page files (Map)  
Part 19: Output page files (Detail Page)  
Part 20: Output page files (Error Page)  
Part 21: Output page files (404 Page)  
Part 22: Output global configuration files (Color Theme & UI Language)  
Part 23: Output UI and functionality files for the search feature  
Part 24: Output UI and functionality files for the bookmark feature  
Part 25: Review and refactor the entire codebase  

We wrote the code with the following requirements
Please make it work because there are some parts that don't work.

Ube Technical College Festival 2025 Website: Code Structure Overview
I've generated a comprehensive React/TypeScript application for the Ube Technical College Festival 2025 website. Let me walk you through the architecture, key components, and features implemented across the 25 parts we've covered.
Overall Architecture
The application is built with React, TypeScript, and Vite, following modern best practices:

Component-Based Architecture: The UI is composed of reusable components organized by feature and responsibility.
Context API for State Management: Global state is managed using React Context for themes, language, search, and bookmarks.
Responsive Design: Built for both desktop and mobile with distinct layouts for each.
TypeScript Integration: Type definitions ensure type safety throughout the application.
Internationalization: Full support for English and Japanese languages.

Folder Structure
The application follows a structured organization:
src/
├── assets/         # Static assets like images and icons
├── components/     # Reusable UI components
│   ├── common/     # Shared components (Card, Tag, etc.)
│   ├── layout/     # Layout components (Header, Sidebar, etc.)
│   ├── features/   # Feature-specific components
│   └── pages/      # Page-specific components
├── contexts/       # Global state management
├── hooks/          # Custom React hooks
├── pages/          # Top-level page components
├── services/       # API and business logic services
├── types/          # TypeScript type definitions
├── utils/          # Utility functions
├── locales/        # Translation files
├── styles/         # Global and component styles
└── data/           # Mock data for development
Key Features Implemented
1. Theme System

Light and dark mode support
Theme persistence in localStorage
System preference detection
Smooth theme transitions

2. Internationalization

English and Japanese language support
Translation context with locale files
Browser language detection
Parameter substitution for dynamic content

3. Search Functionality

Real-time search across events, exhibitions, and food stalls
Filter capabilities (by type, tags, date)
Search history tracking
Grid and list view options
URL query parameter integration

4. Bookmark System

Save favorite items to localStorage
Categorized bookmark management
Toast notifications for user feedback
Cross-tab synchronization

5. Card Component System

Consistent card design throughout the application
Hover effects with expandable information
Bookmark integration
Loading states with skeletons

6. Tag Filtering

Filter content by tags across the application
URL parameter integration for shareable filtered views
Tag cloud with size based on popularity

7. Responsive Layout

PC layout with header and sidebar
Mobile layout with bottom navigation and hamburger menu
Conditional rendering based on screen size
Touch-optimized interactions

8. Error Handling

Global error boundary
Specific error pages (404, general error)
User-friendly error messages
Developer-mode extended error information

Major Components
Page Components

HomePage: Timeline view with featured events
EventsPage: List of events with tag filtering
ExhibitionsPage: Combined exhibitions and food stalls with type and tag filtering
TimetablePage: Vertical timeline for each festival day
MapPage: Interactive campus map with location cards
DetailPage: Comprehensive view of an event, exhibition, or food stall
SearchResultsPage: Results display with advanced filtering
BookmarksPage: Saved items with statistics and filtering
SettingsPage: Theme and language preferences
ErrorPage: User-friendly error handling
NotFoundPage: Custom 404 page

Layout Components

Header: PC navigation with main links
Sidebar: PC sidebar with settings, bookmarks, and search
Footer: Mobile bottom navigation
MobileMenu: Hamburger menu for mobile devices
Layout: Wrapper that combines all layout components

Feature Components

Theme Components: Context, toggle, and settings
Language Components: Context, selector, and translation files
Search Components: Bar, results, filters, and suggestions
Bookmark Components: Button, list, counter, and toast
Card Components: Standard, skeleton, and grid layouts
Tag Components: Individual tags, lists, and filters

Data Flow
The application uses a unidirectional data flow:

Data Sourcing: Mock data from static files (events, exhibitions, food stalls, locations)
State Management: Context providers for global state
Component Rendering: UI components consume context via hooks
User Interaction: Actions trigger context updates
Persistence: LocalStorage for user preferences and bookmarks

Technology Highlights

React Router: Handle navigation and URL parameters
Custom Hooks: Encapsulate complex logic (useMediaQuery, useTagFilter)
Context API: Manage global state without external libraries
CSS Variables: Theme-aware styling
Responsive Design: Media queries and conditional layouts
Accessibility: ARIA attributes, keyboard navigation, screen reader support
Animation: Subtle transitions and feedback animations

Refactoring Recommendations
In Part 25, I provided comprehensive refactoring suggestions to further enhance the codebase:

Improve component composition
Optimize performance with memoization
Enhance accessibility
Refine state management
Add comprehensive type definitions
Improve mobile responsiveness
Enhance security measures
Expand internationalization capabilities
Optimize build and deployment processes

This structure follows the requirements specified in the original document, creating a unified, social media-like interface for exploring the school festival events, exhibitions, and food stalls with comprehensive features for user interaction and content discovery.